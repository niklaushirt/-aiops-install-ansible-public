---

# *************************************************************************************************************************************************
# --------------------------------------------------------------------------------------------------------------------------------------
# Generic Event Webhook 
# --------------------------------------------------------------------------------------------------------------------------------------
# *************************************************************************************************************************************************
- name: DEMO-UI -      üëì Load parameters
  include_vars: ../00_config_cp4waiops.yaml



- name: DEMO-UI -      üì•  WAIOPS Namespace "{{ WAIOPS_NAMESPACE }}"
  set_fact: WAIOPS_NAMESPACE_GLOBAL={{ WAIOPS_NAMESPACE }} 



- name: DEMO-UI -      üåè Get CERT_ELEMENT
  shell: |
    CERT_ELEMENT=$(oc get secret -n cp4waiops  kafka-secrets  -ojson|jq '.data'| jq -r '."ca.crt"'| base64 -d)
    echo ${CERT_ELEMENT}
  register: CERT_ELEMENT


# - name: DEBUG -                 üü¢ Output
#   debug: 
#     var: CERT_ELEMENT.stdout_lines


- name: DEMO-UI -      üíæ Set CERT_ELEMENT={{ CERT_ELEMENT.stdout_lines[0] }} 
  set_fact: CERT_ELEMENT={{ CERT_ELEMENT.stdout_lines[0] }} 




- name: DEMO-UI -      üåè Get KAFKA_BROKER
  shell: |
    echo $(oc get routes iaf-system-kafka-0 -n {{ WAIOPS_NAMESPACE }}      -o=jsonpath='{.status.ingress[0].host}{"\n"}'):443
  register: KAFKA_BROKER



- name: DEMO-UI -      üíæ Set KAFKA_BROKER={{ KAFKA_BROKER.stdout_lines[0] }} 
  set_fact: KAFKA_BROKER={{ KAFKA_BROKER.stdout_lines[0] }} 



- name: DEMO-UI -      üåè Get KAFKA_TOPIC_EVENTS
  shell: |
    KAFKA_TOPIC_EVENTS=$(oc get kafkatopics -n {{ WAIOPS_NAMESPACE }}  | grep -v cp4waiopscp4waiops|grep -v noi-integration| grep cp4waiops-cartridge-alerts-noi| awk '{print $1;}')
    echo ${KAFKA_TOPIC_EVENTS}
  register: KAFKA_TOPIC_EVENTS



- name: DEMO-UI -      üíæ Set KAFKA_TOPIC_EVENTS={{ KAFKA_TOPIC_EVENTS.stdout_lines[0] }} 
  set_fact: KAFKA_TOPIC_EVENTS={{ KAFKA_TOPIC_EVENTS.stdout_lines[0] }} 




- name: DEMO-UI -      üåè Get KAFKA_TOPIC_LOGS
  shell: |
    KAFKA_TOPIC_LOGS=$(oc get kafkatopics -n {{ WAIOPS_NAMESPACE }}  | grep -v cp4waiopscp4waiops| grep cp4waiops-cartridge-logs-humio| awk '{print $1;}')
    echo ${KAFKA_TOPIC_LOGS}
  register: KAFKA_TOPIC_LOGS



- name: DEMO-UI -      üíæ Set KAFKA_TOPIC_LOGS={{ KAFKA_TOPIC_LOGS.stdout_lines[0] }} 
  set_fact: KAFKA_TOPIC_LOGS={{ KAFKA_TOPIC_LOGS.stdout_lines[0] }} 



- name: DEMO-UI -      üåè Get KAFKA_USER
  shell: |
    KAFKA_USER=$(oc get secret ibm-aiops-kafka-secret -n {{ WAIOPS_NAMESPACE }}  --template=\{\{.data.username\}\} | base64 --decode)
    echo ${KAFKA_USER}
  register: KAFKA_USER

- name: DEMO-UI -      üíæ Set KAFKA_USER={{ KAFKA_USER.stdout_lines[0] }} 
  set_fact: KAFKA_USER={{ KAFKA_USER.stdout_lines[0] }} 

- name: DEMO-UI -      üåè Get KAFKA_PWD
  shell: |
    KAFKA_PWD=$(oc get secret ibm-aiops-kafka-secret -n {{ WAIOPS_NAMESPACE }}  --template=\{\{.data.password\}\} | base64 --decode)
    echo ${KAFKA_PWD}
  register: KAFKA_PWD

- name: DEMO-UI -      üíæ Set KAFKA_PWD={{ KAFKA_PWD.stdout_lines[0] }} 
  set_fact: KAFKA_PWD={{ KAFKA_PWD.stdout_lines[0] }} 



- name: DEMO-UI -      üöÄ Create CP4WAIOPS Demo UI  
  community.kubernetes.k8s:
    state: present
    template: ./templates/waiops-demo-ui/create-cp4waiops-demo.j2
