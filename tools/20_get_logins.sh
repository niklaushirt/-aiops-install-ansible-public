#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#       __________  __ ___       _____    ________            
#      / ____/ __ \/ // / |     / /   |  /  _/ __ \____  _____
#     / /   / /_/ / // /| | /| / / /| |  / // / / / __ \/ ___/
#    / /___/ ____/__  __/ |/ |/ / ___ |_/ // /_/ / /_/ (__  ) 
#    \____/_/      /_/  |__/|__/_/  |_/___/\____/ .___/____/  
#                                              /_/            
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------"
#  CP4WAIOPS 3.2 - Get Logins and URLs
#
#
#  ¬©2021 nikh@ch.ibm.com
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
clear

echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"
echo "  "
echo "  üöÄ CloudPak for Watson AIOps 3.2 - Logins and URLs "
echo "  "
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"
echo "  "
echo "  "
export TEMP_PATH=~/aiops-install

# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# Do Not Edit Below
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"



WAIOPS_PARAMETER=$(cat ./00_config_cp4waiops.yaml|grep WAIOPS_NAMESPACE:)
WAIOPS_NAMESPACE=${WAIOPS_PARAMETER##*:}
WAIOPS_NAMESPACE=$(echo $WAIOPS_NAMESPACE|tr -d '[:space:]')


NOI_PARAMETER=$(cat ./00_config_cp4waiops.yaml|grep NOI_NAMESPACE:)
NOI_NAMESPACE=${NOI_PARAMETER##*:}
NOI_NAMESPACE=$(echo $NOI_NAMESPACE|tr -d '[:space:]')

CLUSTER_ROUTE=$(oc get routes console -n openshift-console | tail -n 1 2>&1 ) 
CLUSTER_FQDN=$( echo $CLUSTER_ROUTE | awk '{print $2}')
CLUSTER_NAME=${CLUSTER_FQDN##*console.}




echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"
echo "üöÄ Openshift Console"
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"
echo ""
echo ""
echo "  üì• Openshift Console"
echo "            üåè URL:      https://$(oc get route -n openshift-console console -o jsonpath={.spec.host})"
echo " "
echo " "
    
   

echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"
echo "üöÄ CloudPak for Watson AIOps"
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"
echo ""
echo ""
echo "  üì• CP4WAIOPS"
echo "        AIOPS:"
echo "            üåè URL:      https://$(oc get route -n $WAIOPS_NAMESPACE cpd -o jsonpath={.spec.host})"
echo "            üßë‚Äçü¶≥ User:     $(oc -n ibm-common-services get secret platform-auth-idp-credentials -o jsonpath='{.data.admin_username}' | base64 --decode && echo)"
echo "            üîê Password: $(oc -n ibm-common-services get secret platform-auth-idp-credentials -o jsonpath='{.data.admin_password}' | base64 --decode)"
echo " "
echo " "
    



echo "  üì• Administration hub / Common Services"
echo "            üåè URL:      https://$(oc get route -n ibm-common-services cp-console -o jsonpath={.spec.host})"
echo "            üßë‚Äçü¶≥ User:     $(oc -n ibm-common-services get secret platform-auth-idp-credentials -o jsonpath='{.data.admin_username}' | base64 --decode && echo)"
echo "            üîê Password: $(oc -n ibm-common-services get secret platform-auth-idp-credentials -o jsonpath='{.data.admin_password}' | base64 --decode)"
echo " "
echo " "
    

echo ""
echo ""
echo ""
echo ""
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"
echo "üöÄ CP4WAIOPS Vault"
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"

echo "            üåè URL:      https://$(oc get route -n $WAIOPS_NAMESPACE ibm-vault-deploy-vault-route -o jsonpath={.spec.host})"
echo "            üîê Token:    $(oc get secret -n $WAIOPS_NAMESPACE ibm-vault-deploy-vault-credential -o jsonpath='{.data.token}' | base64 --decode && echo)"
echo ""
echo ""
echo ""


echo ""
echo ""
echo ""
echo ""
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"
echo "üöÄ OCP Connection Details"
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"

DEMO_TOKEN=$(oc -n default get secret $(oc get secret -n default |grep -m1 demo-admin-token|awk '{print$1}') -o jsonpath='{.data.token}'|base64 --decode)
DEMO_URL=$(oc status|grep -m1 "In project"|awk '{print$6}')

#echo "            URL:     $DEMO_URL"
#echo "            Token:   $DEMO_TOKEN"

echo "            üåè URL:     $DEMO_URL"
echo "            üîê Token:   $DEMO_TOKEN"
echo ""
echo ""
echo ""

echo "            üßë‚Äçü¶≥ Login:   oc login --token=$DEMO_TOKEN --server=$DEMO_URL"
echo ""
echo ""
echo ""
echo ""







DEMO_READY=$(oc get ns robot-shop || true) 
if [[ $DEMO_READY =~ "Active" ]]; 
then

    echo "***************************************************************************************************************************************************"
    echo "***************************************************************************************************************************************************"
    echo "üöÄ Demo Apps - Details"
    echo "***************************************************************************************************************************************************"
    echo "***************************************************************************************************************************************************"

    appURL=$(oc get routes -n robot-shop web  -o jsonpath="{['spec']['host']}")|| true
    echo "        üì• RobotShop:"
    echo "            üåè APP URL:           http://$appURL/"

    echo ""
    appURL=$(oc get routes -n kubetoy kubetoy  -o jsonpath="{['spec']['host']}")|| true

    echo "        üì• Kubetoy:"
    echo "            üåè APP URL:           http://$appURL/"
    echo ""
    echo ""
    echo ""
    echo ""
fi




echo ""
echo ""
echo ""
echo ""
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"
echo "üöÄ LDAP Connection Details"
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"
echo "        üì• OPENLDAP:"
echo "            üåè URL:      http://openldap-admin-default.$CLUSTER_NAME/"
echo "            üßë‚Äçü¶≥ User:     cn=admin,dc=ibm,dc=com"
echo "            üîê Password: P4ssw0rd!"
echo ""
echo ""
echo ""
echo ""





echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"
echo "üöÄ Flink Task Manager"
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"
appURL=$(oc get routes -n $WAIOPS_NAMESPACE job-manager  -o jsonpath="{['spec']['host']}")
echo "        üì• Flink Task Manager:"
echo "            üåè APP URL:           https://$appURL/"
echo ""
echo "            In Chrome: if you get blocked just type "thisisunsafe" and it will continue (you don't get any visual feedback when typing!)"
echo ""
echo ""
echo ""
echo ""




NOI_READY=$(oc get pod -n $NOI_NAMESPACE | grep webgui-0|| true) 
if [[ $NOI_READY =~ "2/2" ]]; 
then
    echo "***************************************************************************************************************************************************"
    echo "***************************************************************************************************************************************************"
    echo "üöÄ Event Manager (Netcool Operations Insight) Connection Details"
    echo "***************************************************************************************************************************************************"
    echo "***************************************************************************************************************************************************"
    echo "            üåè URL:      https://$(oc get route -n $NOI_NAMESPACE  evtmanager-ibm-hdm-common-ui -o jsonpath={.spec.host})"
    echo "            üßë‚Äçü¶≥ User:     smadmin"
    echo "            üîê Password: $(oc get secret -n $NOI_NAMESPACE  evtmanager-was-secret -o jsonpath='{.data.WAS_PASSWORD}'| base64 --decode && echo)"



    echo "---------------------------------------------------------------------------------------------"
    echo "    SMADMIN USER:"
    echo "        User:     smadmin"   
    echo "        Password: $(oc get secret evtmanager-icpadmin-secret -o json -n $NOI_NAMESPACE | grep ICP_ADMIN_PASSWORD  | cut -d : -f2 | cut -d '"' -f2 | base64 --decode;)"


    echo "---------------------------------------------------------------------------------------------"
    echo "---------------------------------------------------------------------------------------------"

    echo "    Netcool (NOI):"
    echo "        URL:     https://netcool-evtmanager.$CLUSTER_NAME/"


    echo "---------------------------------------------------------------------------------------------"
    echo "    NOI WEBHOOK:"
    echo "        URL:   <PASTE HERE FOR DOCUMENTATION WHEN CREATED>"
    echo ""
    echo ""
    echo ""
    echo ""
fi




TURBO_READY=$(oc get ns turbonomic || true) 
if [[ $TURBO_READY =~ "Active" ]]; 
then
    echo "***************************************************************************************************************************************************"
    echo "***************************************************************************************************************************************************"
    echo "üöÄ Turbonomic Dashboard Connection Details"
    echo "***************************************************************************************************************************************************"
    echo "***************************************************************************************************************************************************"
    echo "        üì• Turbonomic Dashboard :"
    echo "            üåè URL:      https://api-turbonomic.$CLUSTER_NAME/"
    echo "            üßë‚Äçü¶≥ User:     administrator"
    echo "            üîê Password: As set at init step"
    echo ""
    echo ""
    echo ""
    echo ""
fi





ELK_READY=$(oc get ns openshift-logging || true) 
if [[ $ELK_READY =~ "Active" ]]; 
then
    echo "***************************************************************************************************************************************************"
    echo "***************************************************************************************************************************************************"
    echo "üöÄ ELK Connection Details"
    echo "***************************************************************************************************************************************************"
    echo "***************************************************************************************************************************************************"
    token=$(oc sa get-token cluster-logging-operator -n openshift-logging)
    routeES=`oc get route elasticsearch -o jsonpath={.spec.host} -n openshift-logging`
    routeKIBANA=`oc get route kibana -o jsonpath={.spec.host} -n openshift-logging`
    echo "  "
    echo "        üì• ELK:"
    echo "  "
    echo "           üåè ELK service URL             : https://$routeES/app*"
    echo "           üîê Authentication type         : Token"
    echo "           üîê Token                       : $token"
    echo "  "
    echo "           üåè Kibana URL                  : https://$routeKIBANA"
    echo "           üö™ Kibana port                 : 443"
    echo "           üó∫Ô∏è  Mapping                     : "
    echo "{ "
    echo "  \"codec\": \"elk\","
    echo "  \"message_field\": \"message\","
    echo "  \"log_entity_types\": \"kubernetes.container_image_id, kubernetes.host, kubernetes.pod_name, kubernetes.namespace_name\","
    echo "  \"instance_id_field\": \"kubernetes.container_name\","
    echo "  \"rolling_time\": 10,"
    echo "  \"timestamp_field\": \"@timestamp\""
    echo "}"
    echo "  "
    echo ""
    echo ""
    echo ""
fi




HUMIO_READY=$(oc get ns humio-logging || true) 
if [[ $HUMIO_READY =~ "Active" ]]; 
then

    echo "***************************************************************************************************************************************************"
    echo "***************************************************************************************************************************************************"
    echo "üöÄ HUMIO Connection Details"
    echo "***************************************************************************************************************************************************"
    echo "***************************************************************************************************************************************************"
    echo "        üì• HUMIO:"
    echo "            üåè URL:      http://$(oc get route -n humio-logging humio -o jsonpath={.spec.host})"
    echo "            üßë‚Äçü¶≥ User:     developer"
    echo "            üîê Password: $(oc get secret developer-user-password -n humio-logging -o=template --template={{.data.password}} | base64 --decode)"
    echo ""
    echo ""
    echo ""
    echo "            INTEGRATION URL:      http://$(oc get route -n humio-logging humio -o jsonpath={.spec.host})/api/v1/repositories/aiops/query"
    echo ""
    echo ""
    echo ""
    echo ""
fi


ROOK_READY=$(oc get ns rook-ceph || true) 
if [[ $ROOK_READY =~ "Active" ]]; 
then
    echo "***************************************************************************************************************************************************"
    echo "***************************************************************************************************************************************************"
    echo "üöÄ Rook/Ceph Dashboard Connection Details"
    echo "***************************************************************************************************************************************************"
    echo "***************************************************************************************************************************************************"
    echo "        üì• Rook/Ceph Dashboard :"
    echo "            üåè URL:      https://dash-rook-ceph.$CLUSTER_NAME/"
    echo "            üßë‚Äçü¶≥ User:     admin"
    echo "            üîê Password: $(oc -n rook-ceph get secret rook-ceph-dashboard-password -o jsonpath="{['data']['password']}" | base64 --decode)"
    echo ""
    echo ""
    echo ""
    echo ""    
fi



AWX_READY=$(oc get ns awx || true) 
if [[ $AWX_READY =~ "Active" ]]; 
then
    echo "***************************************************************************************************************************************************"
    echo "***************************************************************************************************************************************************"
    echo "üöÄ AWX Connection Details"
    echo "***************************************************************************************************************************************************"
    echo "***************************************************************************************************************************************************"
    echo "        üì• AWX :"
    echo "            üåè URL:      https://$(oc get route -n awx awx -o jsonpath={.spec.host})"
    echo "            üßë‚Äçü¶≥ User:     admin"
    echo "            üîê Password: $(oc -n awx get secret awx-admin-password -o jsonpath='{.data.password}' | base64 --decode && echo)"
    echo ""
    echo ""
    echo ""
    echo ""
fi



MIQ_READY=$(oc get ns manageiq || true) 
if [[ $MIQ_READY =~ "Active" ]]; 
then
    echo "***************************************************************************************************************************************************"
    echo "***************************************************************************************************************************************************"
    echo "üöÄ ManageIQ Connection Details"
    echo "***************************************************************************************************************************************************"
    echo "***************************************************************************************************************************************************"
    echo "        üì• ManageIQ :"
    echo "            üåè URL:      https://$(oc get route -n manageiq $(oc get route -n manageiq|grep httpd|awk '{print$1}') -o jsonpath={.spec.host})"
    echo "            üßë‚Äçü¶≥ User:     admin"
    echo "            üîê Password: smartvm"
    echo ""
    echo ""
    echo ""
    echo ""
fi




echo ""
echo ""
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"
echo "üöÄ Service Now Connection Details"
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"

echo "        üì• INTEGRATION SNOW-->CP4WAIOPS:"
echo "            üåè URL:                   https://cpd-aiops.$CLUSTER_NAME    (URL for IBM Watson AIOps connection)"
echo "               Instance Name:         aimanager"
echo "            üßë‚Äçü¶≥ User:                  admin"
echo "            üîê Password:              $(oc -n ibm-common-services get secret platform-auth-idp-credentials -o jsonpath='{.data.admin_password}' | base64 --decode)"
echo ""



echo "        üì• INTEGRATION CP4WAIOPS-->SNOW:"
echo "            üåè URL:                   Your SNOW URL"
echo "            üßë‚Äçü¶≥ User ID:               abraham.lincoln             (if you followed the demo install instructions)"
echo "            üîê Password:              P4ssw0rd!                   (if you followed the demo install instructions)"
echo "            üîê Encrypted Password:    g4W3L7/eFsUjV0eMncBkbg==    (if you followed the demo install instructions)"
echo ""
echo ""
echo ""
echo ""
echo ""


